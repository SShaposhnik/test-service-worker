{"version":3,"sources":["logo.svg","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","className","src","logo","alt","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","setInterval","update","res","console","info","timeoutUpdate","onupdatefound","installingWorker","installing","onstatechange","log","state","controller","ons","notification","confirm","title","buttonLabels","postMessage","onUpdate","onSuccess","catch","error","root","document","getElementById","disableAutoStyling","ready","render","element","classList","add","setTimeout","remove","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"2KAAe,MAA0B,iC,uCC2B1BA,MArBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,oCCAFC,G,WAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,4DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GAELC,aAAY,WACVD,EAAaE,SAASH,MAAK,SAAAI,GAAG,OAAIC,QAAQC,KAAK,+BAC9CV,EAAOW,eAEVN,EAAaO,cAAgB,WAC3B,IAAMC,EAAmBR,EAAaS,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WAC/BN,QAAQO,IAAIH,GACmB,cAA3BA,EAAiBI,QACfhB,UAAUC,cAAcgB,YAI1BC,IAAIC,aACHC,QADD,qLAC8C,CAC5CC,MAAO,4HACPC,aAAc,CAAC,uCAAU,sDAE1BnB,MAAK,SAAAI,GACQ,IAARA,GACFK,EAAiBW,YAAY,mBAIjCf,QAAQO,IACN,+GAKEhB,GAAUA,EAAOyB,UACnBzB,EAAOyB,SAASpB,KAMlBI,QAAQO,IAAI,sCAGRhB,GAAUA,EAAO0B,WACnB1B,EAAO0B,UAAUrB,WAO5BsB,OAAM,SAACC,GACNnB,QAAQmB,MAAM,4CAA6CA,MCjHjE,I,OCYMC,G,YAAOC,SAASC,eAAe,SAErCZ,IAAIa,qBAEJb,IAAIc,OAAM,WACRC,iBAAO,cAAC,EAAD,IAASL,GAEhB,IAAMM,EAAUL,SAASC,eAAe,eAEnCI,IAILA,EAAQC,UAAUC,IAAI,sBAEtBC,YAAW,WACTH,EAAQI,WACP,SFPE,SAAkBvC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuC,IAAIC,uBAAwB/C,OAAOC,SAASN,MACpDqD,SAAWhD,OAAOC,SAAS+C,OAIvC,OAGFhD,OAAOiD,iBAAiB,QAAQ,WAC9B,IAAM5C,EAAK,UAAM0C,uBAAN,sBAEPjD,IAiFV,SAAiCO,EAAOC,GAEtC4C,MAAM7C,EAAO,CACX8C,QAAS,CAAE,iBAAkB,YAE5BzC,MAAK,SAAC0C,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjD,UAAUC,cAAc+B,MAAM7B,MAAK,SAACC,GAClCA,EAAa8C,aAAa/C,MAAK,WAC7BV,OAAOC,SAASyD,eAKpBtD,EAAgBC,EAAOC,MAG1B2B,OAAM,WACLlB,QAAQO,IAAI,oEAvGVqC,CAAwBtD,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCK,QAAQO,IACN,+GAMJlB,EAAgBC,EAAOC,OEf/BsD,CAAmC,CAAE3C,cAAe,Q","file":"static/js/main.1a711628.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ons from 'onsenui';\nimport { Button } from 'react-onsenui';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React TEST\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import ons from 'onsenui'\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      //autoupdate PWA\n      setInterval(() => {\n        registration.update().then(res => console.info('FORCE UPDATE - resolve'))\n      }, config.timeoutUpdate)\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          console.log(installingWorker);\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              ons.notification\n              .confirm(`Доступна новая версия приложения.`, {\n                title: 'Обновление приложения',\n                buttonLabels: ['Отмена', 'Обновить'],\n              })\n              .then(res => {\n                if (res === 1) {\n                  installingWorker.postMessage('SKIP_WAITING')\n                }\n              });\n\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport PrompInstall from './prompInstall';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport ons from 'onsenui';\nimport { hydrate, render } from 'react-dom';\n\nimport 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\n\nconst root = document.getElementById('root');\n\nons.disableAutoStyling();\n\nons.ready(() => {\n  render(<App />, root);\n\n  const element = document.getElementById('root-loader');\n\n  if (!element) {\n    return;\n  }\n\n  element.classList.add('loader-fade-effect');\n\n  setTimeout(() => {\n    element.remove();\n  }, 500);\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({ timeoutUpdate: 180000 });\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}